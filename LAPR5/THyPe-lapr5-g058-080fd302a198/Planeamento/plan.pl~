%Factos
:-dynamic camiao/6.
:-dynamic rota/6.
:-dynamic empacotamento/5.
:-dynamic armazem/5.
:-dynamic entrega/5.

%camiao('AA-11-AA',7500,4300,80,100,60).
%camiao('BB-22-BB',7600,4400,90,110,60).

%Armazens
idArmazen('Arouca', 1).
idArmazen('Espinho', 2).
idArmazen('Gondomar', 3).

%Matosinhos
armazem_base(5).

%Tempo entre cidades
tempo(1,2,53).
tempo(1,3,57).
tempo(1,5,65).

tempo(2,1,54).
tempo(2,3,28).
tempo(2,5,27).

tempo(3,1,56).
tempo(3,2,28).
tempo(3,5,18).

tempo(5,1,70).
tempo(5,2,30).
tempo(5,3,25).


%Entregas
entrega(4439, 20221205, 200, 1, 8, 10).
entrega(4440, 20221205, 150, 2, 8, 10).
entrega(4441, 20221205, 250, 3, 8, 10).


entrega(4001, 20221207, 200, 1, 8, 10).
entrega(4002, 20221207, 150, 1, 8, 10).
entrega(4003, 20221207, 250, 2, 8, 10).
entrega(4004, 20221207, 300, 3, 8, 10).
entrega(4005, 20221207, 300, 3, 8, 10).


%Empacotamento
empacotamento(4001, 'AA-11-AA', 0,0,0).
empacotamento(4002, 'AA-11-AA', 1,0,0).
empacotamento(4003, 'AA-11-AA', 0,1,0).
empacotamento(4004, 'AA-11-AA', 0,0,1).

empacotamento(4005, 'BB-22-BB', 0,0,0).



%Imports
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_open)).
:- use_module(library(http/http_cors)).

% Bibliotecas JSON
:- use_module(library(http/json_convert)).
:- use_module(library(http/http_json)).
:- use_module(library(http/json)).

%Encontra todos os caminhos sem o armazem de matosinhos
caminhosOG(Armazens, Caminhos):- findall(Caminho,permutation(Armazens,Caminho),Caminhos).


%Encontra todos os caminhos
caminhos(Armazens, Caminhos):- armazem_base(Base),
                               findall(CaminhoCompleto,
                                       (permutation(Armazens,Caminho),
                                       append([Base|Caminho],[Base],CaminhoCompleto)
                                       %,write(CaminhoCompleto)
                                       ),
                                       Caminhos).




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Servidor %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Inicia o Servidor em uma Port
startServer(Port) :-
    http_server(http_dispatch, [port(Port)]),
    ensure_loaded('camiao'),
    ensure_loaded('rota'),
    ensure_loaded('empacotamento'),
    ensure_loaded('armazem'),
    ensure_loaded('entrega'),
    tell('camiao.pl'), write(':- dynamic camiao/6.'), nl, listing(camiao/6), told,
    tell('rota.pl'), write(':- dynamic rota/6.'), nl, listing(rota/6), told,
    tell('empacotamento.pl'), write(':- dynamic empacotamento/5.'), nl, listing(empacotamento/5), told,
    tell('armazem.pl'), write(':- dynamic armazem/5.'), nl, listing(armazem/5), told,
    tell('entrega.pl'), write(':- dynamic entrega/5.'), nl, listing(entrega/5), told,
    asserta(port(Port)).

% Encerra o Servidor na Port onde foi ligadi anteriormente
stopServer:-
    retract(port(Port)),
    http_stop_server(Port,_).

% Cors
:- set_setting(http:cors, [*]).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% Adicionar Conhecimento %%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Cria um Camiao
persistCamiao():-  tell('camiao.pl'), nl, listing(camiao/6), told.
:- http_handler('/criarCamiao', criaCamiao, []).
criaCamiao(Request):- http_parameters(Request, [matricula(M, []),
                                                tara(Tara, []),
                                                cargaKg(CargaKg, []),
                                                cargaKWh(CargaKWh, []),
                                                autonomia(Autonomia, []),
                                                carregamento(Carregamento, [])]),
                      atom_number(Tara, T),
                      atom_number(CargaKg, CK),
                      atom_number(CargaKWh, CW),
                      atom_number(Autonomia, A),
                      atom_number(Carregamento, C),
                      retractall(camiao(M,_,_,_,_,_)),
                      assertz(camiao(M, T, CK, CW, A, C)),
                      persistCamiao(),
                      prolog_to_json(201, JSONObject),
                      reply_json(JSONObject, [json_object(dict)]).


%Cria uma Rota
persistRota():-  tell('rota.pl'), nl, listing(rota/6), told.
:- http_handler('/criarRota', criaRota, []).
criaRota(Request):- http:parameters(Request, [distancia(Dist, []),
                                                armazem1(Armazem1, []),
                                                armazem2(Armazem2, []),
                                                tempoPercorrer(Tempo, []),
                                                carregamento(Carregamento, []),
                                                carregamentoExtra(Extra, [])]),
                      atom_number(Dist, D),
                      atom_number(Armazem1, A1),
                      atom_number(Armazem2, A2),
                      atom_number(Tempo, T),
                      atom_number(Carregamento, C),
                      atom_number(Extra, E),
                      retract(rota(_,A1,A2,_,_,_)),
                      asserta(rota(D, A1, A2, T, C, E)),
                      persistRota(),
                      prolog_to_json(201, JSONObject),
                      reply_json(JSONObject, [json_object(dict)]).




%Cria um Empacotamento
persistEmpacotamento():-  tell('empacotamento.pl'), nl, listing(empacotamento/6), told.
:- http_handler('/criarEmpacotamento', criaEmpacotamento, []).
criaEmpacotamento(Request):- http:parameters(Request, [entrega(E, []),
                                                       matricula(M, []),
                                                       posx(Posx, []),
                                                       posy(Posy, []),
                                                       posz(Posz, [])]),
                      atom_number(entrega, E),
                      atom_number(Posx, X),
                      atom_number(Posy, Y),
                      atom_number(Posz, Z),
                      retract(empacotamento(E,_,_,_,_)),
                      asserta(empacotamento(E, M, X, Y, Z)),
                      persistEmpacotamento(),
                      prolog_to_json(201, JSONObject),
                      reply_json(JSONObject, [json_object(dict)]).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%% Calcula Caminhos %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Encontra todos os caminhos
:- http_handler('/todosCaminhos', todosCaminhos, []).
todosCaminhos(Request):- http_parameters(Request, [armazem(Armazem, [list])]),
                         atomToList(Armazem, Armazens),
                         caminhos(Armazens, C),
                         prolog_to_json(C, JSONObject),
                         reply_json(JSONObject, [json_object(dict)]).

%Predicados adicionais
listStringToInt([], []):-!.
listStringToInt([S|StringList], [N|NumberList]):- number_string(N,S),
                                              listStringToInt(StringList, NumberList).


atomToList(Atom, IntList):- atom_string(Atom, String),
                            split_string(String, ",","", ListString),
                            listStringToInt(ListString, IntList).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Heuristicas %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Cálculo baseado na distância mais curta

heuDist([Armazem|Armazens], CaminhoFinal):- buildPathDist(Armazem, Armazens, Caminho),
                                                append([5|Caminho], [5], CaminhoFinal).


buildPathDist(_,[],[]):-!.
buildPathDist(Armazem, Armazens, [ArmazemProximo|Caminho]):-  retractall(armazemProximo(_,_)),
                                                              asserta(armazemProximo(5,9000)),
                                                              findClosestDist(Armazem, Armazens),
                                                              armazemProximo(ArmazemProximo,_),
                                                              delete(Armazens, ArmazemProximo, ArmazensRestantes),
                                                              buildPathDist(ArmazemProximo, ArmazensRestantes, Caminho).

findClosestDist(_,[]):-!.
findClosestDist(Armazem, [Current|Armazens]):- tempo(Armazem, Current, Tempo),                                                                                                      armazemProximo(ArmazemProximo,TempoAtual),                                                                                           (Tempo<TempoAtual,
                                                 retractall(armazemProximo(ArmazemProximo,_)),
                                                 asserta(armazemProximo(Current, Tempo)),
                                                 findClosestDist(Armazem, Armazens));                                                                                                findClosestDist(Armazem, Armazens).



%Cálculo baseado na distância e peso

heuDistPeso([Armazem|Armazens],Data, CaminhoFinal):- buildPathDistPeso(Armazem, Armazens,Data, Caminho),
                                                append([5|Caminho], [5], CaminhoFinal).


buildPathDistPeso(_A,[],_D,[]):-!.
buildPathDistPeso(Armazem, Armazens, Data, [ArmazemProximo|Caminho]):-  retractall(armazemProximo(_,_)),
                                                          asserta(armazemProximo(5,-1)),
                                                          findClosestDistPeso(Armazem,Data,Armazens),
                                                          armazemProximo(ArmazemProximo,_),
                                                          delete(Armazens, ArmazemProximo, ArmazensRestantes),
                                                          buildPathDistPeso(ArmazemProximo, ArmazensRestantes,Data, Caminho).

findClosestDistPeso(_A,_D,[]):-!.
findClosestDistPeso(Armazem, Data, [Current|Armazens]):- tempo(Armazem, Current, Tempo),
                                                         entrega(_,Data, Peso, Current,_,_),
                                                         Custo is Tempo*Peso,                                                                                                                 armazemProximo(ArmazemProximo,CustoAtual),                                                                                           (Custo>=CustoAtual,
                                                           retractall(armazemProximo(ArmazemProximo,_)),
                                                           asserta(armazemProximo(Current, Tempo)),
                                                           findClosestDistPeso(Armazem,Data, Armazens));                                                                                      findClosestDistPeso(Armazem,Data, Armazens).



% ------------------------------------------------------------------------
%Calcular um plano a partir de um camião e uma data

:- http_handler('/calculaRota', calculaRota, []).
calculaRota(Request):- http_parameters(Request, [camiao(Camiao, []), data(Data, []), heuristica(Heuristica, [])]),
                       atom_number(Data, DataNumber),
                       atom_number(Heuristica, HeuristicaNumber),
                       listaArmazem(Camiao, DataNumber, ListaArmazens),
                       bestFit(ListaArmazens, HeuristicaNumber, DataNumber, MelhorCaminho),
                       delete(MelhorCaminho, 5, CaminhoArmazens),
                       entregasArmazens(CaminhoArmazens, Camiao, DataNumber, Entregas),
                       Result = [CaminhoArmazens, Entregas],
                       prolog_to_json(Result, JSONObject),
                       reply_json(JSONObject, [json_object(dict)]).


buildResult(Camiao, Data, List):- List=[Camiao, Data].

convertData(Camiao, Data, CamiaoString, DataNumber):- atom_string(Camiao, CamiaoString), atom_number(Data, DataNumber).

listaArmazem(Camiao, Data, List):- findall(Armazem,(entrega(Entrega,Data,_,Armazem,_,_), empacotamento(Entrega,Camiao,_,_,_)), ListTotal), sort(ListTotal, List).

bestFit(Armazens, Heuristica, Data, Result):-
    (Heuristica is 2,
     %Heurística Distância
     heuDist([5|Armazens], Result);
     (Heuristica is 3,
      %Heurística Peso
       caminhos(Armazens, [H|_]), Result = H);
       (Heuristica is 4,
        %Heurística Distancia Peso
        heuDistPeso([5|Armazens], Data, Result);
         %Cálculo completo
         caminhos(Armazens, [H|_]), Result = H)).



entregasArmazens([], _Camiao, _Data, []):-!.
entregasArmazens([H|T], Camiao, Data, [Entregas|Result]):- entregasArmazem(H, Camiao, Data, Entregas),entregasArmazens(T, Camiao, Data, Result).

entregasArmazem(Armazem, Camiao, Data, Entregas):- findall(Entrega,(entrega(Entrega,Data,_,Armazem,_,_), empacotamento(Entrega,Camiao,_,_,_)), Entregas).



%Access form browser
%http://localhost:5000/todosCaminhos?armazem=2,3,4
%http://localhost:5420/calculaRota?camiao=AA-11-AA&data=20221126
%http://localhost:5420/calculaRota?camiao=AA-11-AA&data=20221207

% http://vs272.dei.isep.ipp.pt:2228/criarCamiao?matricula=AA-11-AA&tara=7000&cargaKg=4000&cargaKWh=100&autonomia=100&carregamento=60
